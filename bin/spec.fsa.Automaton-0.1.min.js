describe("fsa.Automaton",function(){var a;beforeEach(function(){a=new fsa.Automaton()});beforeEach(function(){this.addMatchers({toBeInstanceOf:function(b){return this.actual instanceof b}})});afterEach(function(){a.destroy();a=undefined});describe("instance",function(){it("should be of type fsa.Automaton",function(){expect(a).toBeInstanceOf(fsa.Automaton)});it("should have a root state",function(){expect(a.getRootState()).toBeInstanceOf(fsa.State)})});describe("an added state",function(){it("should be detectable",function(){var b=new fsa.State("foo");a.addState(b);expect(a.hasState(b.name)).toBeTruthy()});it("should be removable",function(){var b=new fsa.State("foo");a.addState(b).removeState(b.name);expect(a.hasState(b.name)).toBeFalsy()});it("should be retrievable",function(){var b=new fsa.State("foo");a.addState(b);expect(a.getState(b.name)).toEqual(b)})});describe("the automaton's basic operation",function(){beforeEach(function(){a.createState("off",{transitions:{ignite:"on"},isInitial:true});a.createState("on",{transitions:{shutdown:"off"}})});it("should allow to transition to another state",function(){a.doTransition("ignite");expect(a.getCurrentState()).toEqual(a.getState("on"))});it("should allow to transition back",function(){a.doTransition("ignite");a.doTransition("shutdown");expect(a.getCurrentState()).toEqual(a.getState("off"))});it("should fail silently if transition is not allowed",function(){a.doTransition("ignite");a.doTransition("ignite");expect(a.getCurrentState()).toEqual(a.getState("on"))});it("should fail silently if a transition is not found",function(){a.doTransition("ignite");a.doTransition("whatever");expect(a.getCurrentState()).toEqual(a.getState("on"))});it("should fail silently if a transition target is not found",function(){a.doTransition("ignite");a.removeState("off");a.doTransition("shutdown");expect(a.getCurrentState()).toEqual(a.getState("on"))});it("should fail silently if no states present",function(){a.doTransition("ignite");a.removeState("off");a.removeState("on");a.doTransition("shutdown")});it("should revert to the parent node if a current state is removed",function(){a.doTransition("ignite");a.removeState("on");expect(a.getCurrentState()).toEqual(a.getRootState())})});describe("the automaton's non-binary, single-level state operation",function(){beforeEach(function(){a.createState("green",{transitions:{next:"orange"},isInitial:true});a.createState("orange",{transitions:{next:"red"}});a.createState("red",{transitions:{next:"green"}})});it("should allow for multiple transitions with the same name",function(){a.doTransition("next");expect(a.getCurrentState()).toEqual(a.getState("orange"));a.doTransition("next");expect(a.getCurrentState()).toEqual(a.getState("red"));a.doTransition("next");expect(a.getCurrentState()).toEqual(a.getState("green"))});it("should terminate transition with guards denying entry",function(){var b=a.getState("orange");var c=function(){return false};b.addGuard("enter",c);a.doTransition("next");a.doTransition("next");expect(a.getCurrentState()).toEqual(a.getState("green"))});it("should terminate transition with guards denying exit",function(){var b=a.getState("orange");b.addGuard("exit",function(){return false});a.doTransition("next");a.doTransition("next");expect(a.getCurrentState()).toEqual(a.getState("orange"))})});describe("the automaton's configuration",function(){it("should be possible with an object",function(){var b={off:{isInitial:true,powerOn:"on"},"off/standby":{isInitial:true},"off/kaput":{},"off/kaput/fixable":{isInitial:true,fixed:"off/standby"},"off/kaput/pertetotale":{},on:{powerOff:"off",fail:"off/kaput",vandalize:"off/kaput/pertetotale"},"on/green":{isInitial:true,next:"on/orange"},"on/orange":{next:"on/red"},"on/red":{next:"on/green"}};a.parse(b);expect(a.getCurrentState()).toEqual(a.getState("off/standby"));a.doTransition("powerOn");expect(a.getCurrentState()).toEqual(a.getState("on/green"));a.doTransition("next");expect(a.getCurrentState()).toEqual(a.getState("on/orange"));a.doTransition("fail");expect(a.getCurrentState()).toEqual(a.getState("off/kaput/fixable"));a.doTransition("fixed");expect(a.getCurrentState()).toEqual(a.getState("off/standby"));a.doTransition("powerOn");expect(a.getCurrentState()).toEqual(a.getState("on/green"));a.doTransition("vandalize");expect(a.getCurrentState()).toEqual(a.getState("off/kaput/pertetotale"))})});describe("a registered action",function(){var c;var b={green:{isInitial:true,next:"orange"},orange:{next:"red"},red:{next:"green"}};beforeEach(function(){c=jasmine.createSpy("actionSpy");a.parse(b)});it("should be called upon exit",function(){var d=a.getState("green");d.addAction("exit",c);a.doTransition("next");expect(c).toHaveBeenCalled()});it("should be called upon entry",function(){var d=a.getState("orange");d.addAction("enter",c);a.doTransition("next");expect(c).toHaveBeenCalled()});it("should receive an event object",function(){var d=a.getState("orange");d.addAction("enter",c);a.doTransition("next");var f={type:"enter",from:"green",to:"orange"};expect(c).toHaveBeenCalledWith(f)});it("should recieve a passed payload",function(){var d=a.getState("orange");d.addAction("enter",c);var g={foo:"bar"};a.doTransition("next",g);var f={type:"enter",from:"green",to:"orange"};expect(c).toHaveBeenCalledWith(f,g)});it("should be able to pause and restart the fsm",function(){callback=function(){a.pause()};runs(function(){var d=a.getState("green");d.addAction("exit",callback)});runs(function(){a.doTransition("next");expect(a.isTransitioning()).toBeTruthy()});waits(500);runs(function(){expect(a.isTransitioning()).toBeTruthy();a.proceed();expect(a.isTransitioning()).toBeFalsy()})})})});